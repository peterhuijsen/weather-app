// <auto-generated />
using System;
using App.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(UserContext))]
    [Migration("20231120193517_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CredentialsUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Uuid");

                    b.HasIndex("CredentialsUuid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.HashOneTimeCredential", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("OneTimeCredentialUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uuid");

                    b.HasIndex("OneTimeCredentialUuid");

                    b.ToTable("HashOneTimeCredentials");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.OneTimeCredential", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Uuid");

                    b.ToTable("OneTimeCredentials");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.TimeOneTimeCredential", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OneTimeCredentialUuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uuid");

                    b.HasIndex("OneTimeCredentialUuid");

                    b.ToTable("TimeOneTimeCredentials");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Credentials", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Google")
                        .HasColumnType("text");

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<bool>("MFA")
                        .HasColumnType("boolean");

                    b.Property<string>("Microsoft")
                        .HasColumnType("text");

                    b.Property<Guid>("OTPUuid")
                        .HasColumnType("uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("OTPUuid");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("Identity.Consumer.Models.PasskeyCredentials", b =>
                {
                    b.Property<byte[]>("Id")
                        .HasColumnType("bytea");

                    b.Property<Guid?>("CredentialsUuid")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("PublicKey")
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("CredentialsUuid");

                    b.ToTable("PasskeyCredentials");
                });

            modelBuilder.Entity("App.Models.User", b =>
                {
                    b.HasOne("Identity.Consumer.Models.Credentials", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.HashOneTimeCredential", b =>
                {
                    b.HasOne("Identity.Consumer.Models.Code.OneTimeCredential", null)
                        .WithMany("HashCodes")
                        .HasForeignKey("OneTimeCredentialUuid");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.TimeOneTimeCredential", b =>
                {
                    b.HasOne("Identity.Consumer.Models.Code.OneTimeCredential", null)
                        .WithMany("TimeCodes")
                        .HasForeignKey("OneTimeCredentialUuid");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Credentials", b =>
                {
                    b.HasOne("Identity.Consumer.Models.Code.OneTimeCredential", "OTP")
                        .WithMany()
                        .HasForeignKey("OTPUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OTP");
                });

            modelBuilder.Entity("Identity.Consumer.Models.PasskeyCredentials", b =>
                {
                    b.HasOne("Identity.Consumer.Models.Credentials", null)
                        .WithMany("Passkeys")
                        .HasForeignKey("CredentialsUuid");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Code.OneTimeCredential", b =>
                {
                    b.Navigation("HashCodes");

                    b.Navigation("TimeCodes");
                });

            modelBuilder.Entity("Identity.Consumer.Models.Credentials", b =>
                {
                    b.Navigation("Passkeys");
                });
#pragma warning restore 612, 618
        }
    }
}
